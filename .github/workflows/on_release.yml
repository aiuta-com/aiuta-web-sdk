name: Build and Deploy to Prod on create release

on:
  release:
    types: [created]

jobs:
  build-and-deploy-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to upload release assets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      # ===========================================
      # üîß VERSION NORMALIZATION
      # ===========================================
      - name: Normalize version from tag
        run: |
          # Extract version from tag (remove 'v' prefix if present)
          VERSION=$(echo ${{ github.event.release.tag_name }} | sed 's/^v//')

          # Normalize version to MAJOR.MINOR.PATCH format
          # Split version by dots and pad with zeros if needed
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          NORMALIZED_FULL_VERSION="$MAJOR.$MINOR.$PATCH"

          # Store normalized cleaned version for reuse in other steps
          echo "FULL_VERSION=$NORMALIZED_FULL_VERSION" >> $GITHUB_ENV

          # Store normalized version with 'v' prefix for deployment
          echo "PREFIXED_FULL_VERSION=v$NORMALIZED_FULL_VERSION" >> $GITHUB_ENV

          # Store normalized major version with 'v' prefix for deployment
          echo "PREFIXED_MAJOR_VERSION=v$MAJOR" >> $GITHUB_ENV

      # ===========================================
      # üìù VERSION UPDATE
      # ===========================================
      - name: Update version in package.json
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Only update if versions are different
          if [ "${{ env.FULL_VERSION }}" != "$CURRENT_VERSION" ]; then
            echo "Updating version from $CURRENT_VERSION to ${{ env.FULL_VERSION }}"
            npm version ${{ env.FULL_VERSION }} --no-git-tag-version
          else
            echo "Version ${{ env.FULL_VERSION }} is already up to date in package.json"
          fi

      # ===========================================
      # üì¶ BUILD & ARCHIVE
      # ===========================================
      - name: Build project
        run: npm run build

      - name: Zip build output
        run: |
          cd dist
          zip -r ../release.zip .

      # ===========================================
      # üîê GCP AUTHENTICATION
      # ===========================================
      - name: Set up GCP credentials Prod
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_STATIC_UPLOADER_SA_KEY_JSON_PROD }}

      # ===========================================
      # üöÄ FULL VERSION DEPLOYMENT
      # ===========================================
      - name: Upload SDK to GCS bucket Prod
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: dist/sdk/
          destination: aiuta_prod_static/sdk/${{ env.PREFIXED_FULL_VERSION }}/
          parent: false
          process_gcloudignore: 'false'

      - name: Upload APP to GCS bucket Prod
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: dist/app/
          destination: aiuta_prod_static/sdk/${{ env.PREFIXED_FULL_VERSION }}/
          parent: false
          process_gcloudignore: 'false'

      # ===========================================
      # üöÄ MAJOR VERSION DEPLOYMENT
      # ===========================================
      - name: Upload SDK to GCS bucket Prod (major)
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: dist/sdk/
          destination: aiuta_prod_static/sdk/${{ env.PREFIXED_MAJOR_VERSION }}/
          parent: false
          process_gcloudignore: 'false'

      - name: Upload APP to GCS bucket Prod (major)
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: dist/app/
          destination: aiuta_prod_static/sdk/${{ env.PREFIXED_MAJOR_VERSION }}/
          parent: false
          process_gcloudignore: 'false'

      # ===========================================
      # üöÄ LATEST DEPLOYMENT
      # ===========================================
      - name: Upload SDK to GCS bucket Prod (latest)
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: dist/sdk/
          destination: aiuta_prod_static/sdk/latest/
          parent: false
          process_gcloudignore: 'false'

      - name: Upload APP to GCS bucket Prod (latest)
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: dist/app/
          destination: aiuta_prod_static/sdk/latest/
          parent: false
          process_gcloudignore: 'false'

      # ===========================================
      # üì§ UPLOAD ARTIFACTS TO RELEASE
      # ===========================================
      - name: Upload artifacts to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} release.zip dist/sdk/* --clobber

      # ===========================================
      # üîÑ VERSION INCREMENT
      # ===========================================
      - name: Commit next patch version
        run: |
          # Calculate next patch version
          # Split version into major.minor.patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ env.FULL_VERSION }}"
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"

          # Update version in package.json to next patch version
          npm version $NEXT_VERSION --no-git-tag-version

          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Add and commit the changes
          git add package.json package-lock.json
          git commit -m "Update version to $NEXT_VERSION"

          # Fetch the latest changes from the default branch
          git fetch origin main

          # Create a temporary branch from the current HEAD
          git checkout -b temp-branch

          # Rebase on top of the latest changes from the default branch
          git rebase origin/main

          # Push to the default branch with force-with-lease for safety
          git push --force-with-lease origin temp-branch:main

      # ===========================================
      # üìã RELEASE DESCRIPTION UPDATE
      # ===========================================
      - name: Update release description with file links
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the current release description
          CURRENT_DESCRIPTION=$(gh release view ${{ github.event.release.tag_name }} --json body -q .body)

          # Create a temporary file for the updated description
          echo "$CURRENT_DESCRIPTION" > updated_description.md

          # Add a section header for the links
          echo -e "\n## SDK Files" >> updated_description.md
          echo "The following files are available at:" >> updated_description.md
          echo "" >> updated_description.md

          # Generate links for versioned files
          echo "### Versioned Files (specific to this release)" >> updated_description.md
          for file in dist/sdk/*; do
            filename=$(basename "$file")
            echo "- https://static.aiuta.com/sdk/${{ env.PREFIXED_FULL_VERSION }}/${filename}" >> updated_description.md
          done

          # Generate links for major version files
          echo -e "\n### Major Version Files (stable version for your major release)" >> updated_description.md
          for file in dist/sdk/*; do
            filename=$(basename "$file")
            echo "- https://static.aiuta.com/sdk/${{ env.PREFIXED_MAJOR_VERSION }}/${filename}" >> updated_description.md
          done

          # Generate links for latest files
          echo -e "\n### Latest Files (always points to the most recent release)" >> updated_description.md
          for file in dist/sdk/*; do
            filename=$(basename "$file")
            echo "- https://static.aiuta.com/sdk/latest/${filename}" >> updated_description.md
          done

          # Update the release description
          gh release edit ${{ github.event.release.tag_name }} --notes "$(cat updated_description.md)"
