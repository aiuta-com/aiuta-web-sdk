import { useEffect } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { motion } from "framer-motion";

// redux
import { useAppSelector, useAppDispatch } from "@lib/redux/store";

// actions
import { configSlice } from "@lib/redux/slices/configSlice";

// selectors
import {
  isMobileSelector,
  onboardingStepsSelector,
} from "@lib/redux/slices/configSlice/selectors";

// components
import { Section } from "@/components/feature/";
import { Onboarding } from "@/components/shared";

// styles
import styles from "./index.module.scss";

const initiallAnimationConfig = {
  initial: {
    opacity: 1,
    scale: 1,
    x: "0vw",
  },
  animate: {
    opacity: 1,
    scale: 1,
    x: 0,
  },
  exit: {
    opacity: 0,
    scale: 0,
    x: "0vw",
  },
  transition: {
    duration: 0.3,
    ease: "easeInOut",
  },
};

export default function Home() {
  const router = useRouter();

  const dispatch = useAppDispatch();

  const isMobile = useAppSelector(isMobileSelector);
  const onboardingSteps = useAppSelector(onboardingStepsSelector);

  const handleGetWidnwInitiallySizes = () => {
    window.parent.postMessage({ action: "get_window_sizes" }, "*");
  };

  useEffect(() => {
    handleGetWidnwInitiallySizes();

    const handleMessage = (e: MessageEvent) => {
      if (e.data && e.data.type) {
        if (e.data.type === "resize") {
          if (e.data.width <= 992 && !isMobile) {
            dispatch(configSlice.actions.setIsMobile(true));
          } else {
            dispatch(configSlice.actions.setIsMobile(false));
          }
        } else if (e.data.type === "ADD_GENERATION_BUTTON_CONFIGS") {
          const buttonConfigs = { ...e.data };
          delete buttonConfigs.type;
          dispatch(configSlice.actions.setGenerationButtonConfigs(buttonConfigs))
        }
      }
    };

    window.addEventListener("message", handleMessage);

    // eslint-disable-next-line
  }, []);

  useEffect(() => {
    if (!globalThis) return;
    dispatch(configSlice.actions.setIsShowSpinner(true));

    setTimeout(() => {
      const isOnboarding = localStorage.getItem("isOnboarding") || false;
      const recentlyPhotosFromStorage = JSON.parse(
        localStorage.getItem("tryon-recent-photos") || "[]"
      );

      if (isOnboarding) {
        if (recentlyPhotosFromStorage.length > 0) {
          router.push("/view");
        } else {
          if (isMobile) {
            router.push("/view");
          } else {
            router.push("/qr");
          }
        }

        setTimeout(() => {
          dispatch(configSlice.actions.setIsInitialized(true));
          dispatch(configSlice.actions.setIsShowSpinner(false));
        }, 500);
      } else {
        dispatch(configSlice.actions.setIsInitialized(true));
        dispatch(configSlice.actions.setIsShowSpinner(false));

        if (isMobile) {
          dispatch(configSlice.actions.setIsShowFooter(false));
        }
      }

      // dispatch(configSlice.actions.setIsShowSpinner(false));
    }, 2000);
  }, [router, isMobile, dispatch]);

  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <motion.div key="home-page" {...initiallAnimationConfig}>
        <Section
          className={
            isMobile && onboardingSteps === 2 ? styles.sectionMobile : ""
          }
        >
          <Onboarding />
        </Section>
      </motion.div>
    </>
  );
}
