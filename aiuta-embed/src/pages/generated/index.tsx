import { UIEvent, useRef, useState } from "react";

import { motion } from "framer-motion";

// redux
import { useAppSelector } from "@lib/redux/store";

// selectors
import { isMobileSelector } from "@lib/redux/slices/configSlice/selectors";
import { generatedImagesSelector } from "@lib/redux/slices/generateSlice/selectors";

// components
import { GeneratedImageButtons } from "@/components/shared";
import { Section, ViewImage, MiniSliderItem } from "@/components/feature";

// styles
import styles from "./generated.module.scss";
import GeneratedMobile from "./generatedMobile";

const initiallAnimationConfig = {
  initial: {
    opacity: 0,
    scale: 0,
    x: "0vw",
  },
  animate: {
    opacity: 1,
    scale: 1,
    x: 0,
  },
  exit: {
    opacity: 0,
    scale: 0,
    x: "0vw",
  },
  transition: {
    duration: 0.3,
    ease: "easeInOut",
  },
};

const GENERATED_IMAGE_HEIGHT = 460;
const SLIDE_ITEM_IMAGE_HEIGHT = 96;

export default function Generated() {
  const [slideItemIndex, setSlideItemIndex] = useState<number>(0);

  const miniSliderContentRef = useRef<HTMLDivElement | null>(null);
  const generatedImagesContentRef = useRef<HTMLDivElement | null>(null);

  const isMobile = useAppSelector(isMobileSelector);
  const generatedImages = useAppSelector(generatedImagesSelector);

  const handleClickOnSliderItem = (index: number) => {
    setSlideItemIndex(index);

    const scrollToSliderContent = index * SLIDE_ITEM_IMAGE_HEIGHT - 200;
    const scrollToGeneratedImagesContent = index * GENERATED_IMAGE_HEIGHT;

    if (miniSliderContentRef && miniSliderContentRef.current) {
      miniSliderContentRef.current.scrollTop = scrollToSliderContent;
    }

    if (generatedImagesContentRef && generatedImagesContentRef.current) {
      generatedImagesContentRef.current.scrollTop =
        scrollToGeneratedImagesContent;
    }
  };

  const handleDetectContentScrollPosition = (
    event: UIEvent<HTMLDivElement>
  ) => {
    const target = event.target as HTMLDivElement;

    for (const element of target.children) {
      if ("id" in element) {
        if (+element.id * GENERATED_IMAGE_HEIGHT === target.scrollTop) {
          if (miniSliderContentRef && miniSliderContentRef.current) {
            setSlideItemIndex(+element.id);

            miniSliderContentRef.current.scrollTop =
              +element.id * SLIDE_ITEM_IMAGE_HEIGHT - 200;
          }
        }
      }
    }
  };

  return (
    <>
      <head>
        <meta name="description" content="Generated by create react app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </head>
      <Section className={`${isMobile ? styles.sectionMobile : ""}`}>
        <motion.div
          key="generated-page"
          className={styles.viewContent}
          {...initiallAnimationConfig}
        >
          {isMobile ? (
            <GeneratedMobile />
          ) : (
            <>
              <div
                ref={generatedImagesContentRef}
                className={styles.generatedImagesScrollableView}
                onScrollEnd={handleDetectContentScrollPosition}
              >
                {generatedImages.length > 1 ? (
                  <div
                    ref={miniSliderContentRef}
                    className={styles.generatedImagesSlider}
                  >
                    {generatedImages.map(({ id, url }, index) => {
                      return (
                        <MiniSliderItem
                          key={id}
                          src={url}
                          isActive={slideItemIndex === index}
                          onClick={() => handleClickOnSliderItem(index)}
                        />
                      );
                    })}
                  </div>
                ) : null}
                {generatedImages
                  ? generatedImages.map(({ id, url }, index) => {
                      return (
                        <div key={id} id={String(index)}>
                          <ViewImage
                            url={url}
                            imgUnoptimazed={true}
                            isStartGeneration={false}
                            className={styles.viewItem}
                            isShowChangeImageBtn={false}
                          />
                        </div>
                      );
                    })
                  : null}
              </div>
              {generatedImages && generatedImages.length > 0 ? (
                <GeneratedImageButtons
                  activeGeneratedImageUrl={generatedImages[slideItemIndex].url}
                />
              ) : null}
            </>
          )}
        </motion.div>
      </Section>
    </>
  );
}
